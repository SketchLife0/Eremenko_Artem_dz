def sum_list_1(dataset: list) -> int: # Вычисляет сумму чисел списка dataset, сумма цифр которых делится нацело на 7
    intermediate_sum_list = []  # Подготовка пустого списка для ответа
    for i in dataset:  # Проверка каждого элемента списка
        my_list = []  # Подготовка промежуточного списка
        c = i  # Подготовка на случай совападения всех условий
        while i > 9:  # Проверка условий чтобы сумма всех цифр числа делилась на 7
            b = i % 10  # Отсеивание самой правой цифры
            i = i // 10  # Перезапись и повтор
            my_list.append(b)  # Сохранение в промежуточный список
        else:
            my_list.append(i)  # Сохранение в промежуточный список последней цифры
        result = sum(my_list)  # Сохранение в переменную промежуточный результат
        if result % 7 == 0:  # Проверка главного условия
            intermediate_sum_list.append(c)  # Сохранение всего числа в список для ответа
    result = sum(intermediate_sum_list)  # Финальный ответ
    return result  # Возвращает значение полученной суммы
def sum_list_2(dataset: list) -> int:  # К каждому элементу списка добавляет 17 и вычисляет сумму чисел списка, сумма цифр которых делится нацело на 7
    intermediate_my_list2 = [] # Подготовка пустого списка
    for i in dataset: # Прибавка 17 к каждому числу списка
        intermediate_my_list2.append(i+17)  # Запись в новый список новых чисел
    result = sum_list_1(intermediate_my_list2) # Вызов подфункции и передача вывода в переменную result
    return result # Вывод результата
my_list = [i**3 for i in range(1, 1001, 2)]  # Создаёт список, состоящий из кубов нечётных чисел
result_1 = sum_list_1(my_list)  # Использование первой функции
print(result_1)  # Вывод ответа функции
result_2 = sum_list_2(my_list)  # Использование второй функции
print(result_2)  # Вывод ответа второй функции